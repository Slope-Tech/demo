 function MessageRouter(options) { var messageHandlers = {}; var messageValidators = {}; options = options || {}; options.debug = true; this.createId = function() { return Math.random().toString(36).slice(2); }; this.setListener = function(subject, callback, validator) { if ( typeof callback === 'function' ) messageHandlers[subject] = callback; if ( typeof validator === 'function' ) messageValidators[subject] = validator; }; this.removeListener = function(subject) { messageHandlers[subject] = undefined; delete messageHandlers[subject]; }; this.setOption = function(name, val) { options[name] = val; }; this.receive = function(msgEvent) { var callbackResult; try { var postMsg = msgEvent.data; var subject = postMsg.subject; var validator = messageValidators[subject] || options.validator || null; var isValidSource = (typeof validator != 'function' || validator(msgEvent)); var isValidTarget = (subject in messageHandlers); var logColor = (isValidSource && isValidTarget) ? 'blue' : 'red'; if (isValidSource) { if ( options.debug == true && console.groupCollapsed ) { console.groupCollapsed('%cPostMessage Received <-- ' + subject, 'color: ' + logColor + '; font-weight: bold;'); console.log(postMsg); } if ( isValidTarget ) { callbackResult = messageHandlers[subject](postMsg.content, msgEvent); } else if ( options.debug == true ) { console.log('%cNo message handler found for ' + subject, 'color: red; font-weight: bold;'); } if ( postMsg.reply && isValidTarget ) { this.send(postMsg.messageId, callbackResult, null, msgEvent.source, msgEvent.origin); } } else if ( options.debug == true ) { console.log('%cMessageRouter ignored message from unknown source.', 'color: orange; font-weight: bold;'); } if ( options.debug == true && console.groupEnd ) { console.groupEnd(); } } catch (error) { console.error(error); } }; this.send = function(subject, content, replyHandler, target, origin) { var self = this; var postMsg = { messageId: this.createId(), reply: false, subject: subject, content: content }; target = target || options.target; origin = origin || options.origin; if ( target && typeof target.postMessage === 'function' ) { if ( typeof replyHandler === 'function' ) { postMsg.reply = true; this.setListener(postMsg.messageId, function (reply, msgEvent) { if ( msgEvent.source === target ) { replyHandler(reply, msgEvent); self.removeListener(postMsg.messageId); } }); } if ( options.debug == true && console.groupCollapsed ) { console.groupCollapsed('%cPostMessage Sent --> ' + subject, 'color: orange; font-weight: bold;'); console.log(postMsg); } target.postMessage(postMsg, origin); if ( options.debug == true && console.groupEnd ) { console.groupEnd(); } } }; if ( typeof window.postMessage == 'function' ) { window.addEventListener('message', this.receive.bind(this), false); } } 