 function baseDomain(url) { var match; var baseDomain = ''; var re = /^(https?:\/\/)?([a-z0-9\-]+\.)*([a-z0-9\-]+\.[a-z0-9]+)/i; if ( typeof url === 'string' ) { match = url.match(re); if ( match !== null ) { baseDomain = match[3].toLowerCase(); } } return baseDomain; } var Ajax = { method: 'POST', timeout: 30000, withCredentials: true, decodeJSON: true, stringify: function(obj) { return JSON.stringify(obj).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029'); }, serialize: function(obj) { var str; var params = []; if ( typeof obj !== 'object' ) return obj; for ( var param in obj ) { str = encodeURIComponent(param) + '=' + encodeURIComponent(obj[param]); params.push(str); } return params.join('&').replace(/%20/g, '+'); }, submit: function(form, options) { var action; var formData = {}; options = options || {}; if ( typeof form === 'string' ) form = document.getElementById(form); if ( form instanceof HTMLFormElement ) { for (var i=0; i < form.elements.length; i++) { var el = form.elements[i]; if ( el.name && ! el.disabled ) { var value = ( el.tagName === 'SELECT' ) ? el.options[el.selectedIndex].value : el.value; formData[el.name] = value; } } if ( typeof options.data === 'object' ) { for ( var param in options.data ) { formData[param] = options.data[param]; } } action = options.action || form.action || ''; options.method = options.method || form.method; options.data = formData; Ajax.send(action, options); } }, send: function(url, options) { if ( typeof options === 'function' ) options = {onSuccess: options}; options = options || {}; var xhr = new XMLHttpRequest(); var decodeJSON = (options.decodeJSON != null) ? options.decodeJSON : Ajax.decodeJSON; var method = (options.method) ? options.method.toUpperCase() : Ajax.method.toUpperCase(); var postData = (method === 'POST') ? Ajax.serialize(options.data) : null; if ( method === 'GET' && options.data ) { if ( url.indexOf('?') === -1 ) { url += '?'; } else if ( url.length > (url.indexOf('?') + 1) ) { url += '&'; } if ( typeof options.data === 'object' ) { url += Ajax.serialize(options.data); } else { url += options.data.replace(/^[?&]/, ''); } } xhr.open(method, url, true); xhr.timeout = options.timeout || Ajax.timeout; xhr.withCredentials = (options.withCredentials != null) ? options.withCredentials : Ajax.withCredentials; xhr.onreadystatechange = function() { var response, responseHandler; if ( xhr.readyState === 4 ) { try { responseHandler = (xhr.status < 300 || xhr.status === 304) ? options.onSuccess : options.onFail; response = (decodeJSON == true) ? JSON.parse(xhr.responseText) : xhr.responseText; } catch (e) { response = xhr.responseText; } if ( typeof responseHandler === 'function' ) { responseHandler(response); } if ( typeof options.done === 'function' ) { options.done(response); } } }; if ( options.contentType ) { xhr.setRequestHeader('Content-type', options.contentType); } else if ( method === 'POST' ) { xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'); } xhr.send(postData); } }; var FileLoader = { timeout: 6000, loading: [], loaded: [], loadHTML: function(url, container) { Ajax.send(url, { method: 'GET', decodeJSON: false, withCredentials: false, onSuccess: function(response) { if ( ! container ) { container = document.createElement('div'); document.body.appendChild(container); } if ( typeof container === 'string' ) { container = document.getElementById(container); } if ( container instanceof HTMLElement ) { container.innerHTML = response; } } }); }, loadCSS: function(url, args) { var stylesheet = document.createElement('link'); stylesheet.setAttribute('rel', 'stylesheet'); stylesheet.setAttribute('type', 'text/css'); stylesheet.setAttribute('href', url); document.getElementsByTagName('head')[0].appendChild(stylesheet); return stylesheet; }, loadScript: function(url, args) { var script = document.createElement("script"); script.type = "text/javascript"; script.src = url; args = args || {}; timeout = args.timeout || FileLoader.timeout; if ( typeof args.customAttributes === 'object' ) { for ( var attr in args.customAttributes ) { script.setAttribute(attr, args.customAttributes[attr]); } } if ( script.readyState ){ script.onreadystatechange = function(){ var loadingIdx = FileLoader.loading.indexOf(url); if ( script.readyState === "loaded" || script.readyState === "complete" ) { script.onreadystatechange = null; FileLoader.loaded.push(url); if ( loadingIdx !== -1 ) FileLoader.loading.splice(loadingIdx, 1); if ( typeof args.onLoad === 'function' ) args.onLoad(); } }; } else { script.onload = function(){ var loadingIdx = FileLoader.loading.indexOf(url); FileLoader.loaded.push(url); if ( loadingIdx !== -1 ) FileLoader.loading.splice(loadingIdx, 1); if ( typeof args.onLoad === 'function' ) args.onLoad(); }; } setTimeout(function() { var loadingIdx = FileLoader.loading.indexOf(url); var loadedIdx = FileLoader.loaded.indexOf(url); if ( loadingIdx !== -1 ) FileLoader.loading.splice(loadingIdx, 1); if ( loadedIdx === -1 && typeof args.onTimeout === 'function' ) args.onTimeout(); }, timeout); document.getElementsByTagName('head')[0].appendChild(script); return script; }, require: function(url, args) { if ( FileLoader.loaded.indexOf(url) === -1 && FileLoader.loading.indexOf(url) === -1 ) { return FileLoader.loadScript(url, args); } } }; 